// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

export interface UserTrackingData {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  timestamp: string;
  timezone: string;
  
  // –ë—Ä–∞—É–∑–µ—Ä –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  userAgent: string;
  browser: string;
  device: string;
  os: string;
  screenResolution: string;
  
  // –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
  referrer: string;
  landingPage: string;
  currentPage: string;
  
  // UTM –º–µ—Ç–∫–∏
  utmSource?: string;
  utmMedium?: string;
  utmCampaign?: string;
  utmTerm?: string;
  utmContent?: string;
  
  // –ü–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ
  pagesVisited: string[];
  timeOnSite: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
  country?: string;
  city?: string;
  ip?: string;
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ
function getBrowserInfo(): { browser: string; os: string; device: string } {
  const ua = navigator.userAgent;
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
  let browser = 'Unknown';
  if (ua.indexOf('Firefox') > -1) browser = 'Firefox';
  else if (ua.indexOf('Chrome') > -1 && ua.indexOf('Edge') === -1 && ua.indexOf('Edg') === -1) browser = 'Chrome';
  else if (ua.indexOf('Safari') > -1 && ua.indexOf('Chrome') === -1) browser = 'Safari';
  else if (ua.indexOf('Edge') > -1 || ua.indexOf('Edg') > -1) browser = 'Edge';
  else if (ua.indexOf('Opera') > -1 || ua.indexOf('OPR') > -1) browser = 'Opera';
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
  let os = 'Unknown';
  if (ua.indexOf('Windows') > -1) os = 'Windows';
  else if (ua.indexOf('Mac') > -1) os = 'MacOS';
  else if (ua.indexOf('Linux') > -1) os = 'Linux';
  else if (ua.indexOf('Android') > -1) os = 'Android';
  else if (ua.indexOf('iOS') > -1 || ua.indexOf('iPhone') > -1 || ua.indexOf('iPad') > -1) os = 'iOS';
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  let device = 'Desktop';
  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua)) {
    device = 'Mobile';
  } else if (/iPad|Android|Tablet/i.test(ua)) {
    device = 'Tablet';
  }
  
  return { browser, os, device };
}

// –ü–æ–ª—É—á–∏—Ç—å UTM –º–µ—Ç–∫–∏ –∏–∑ URL
function getUTMParams(): {
  utmSource?: string;
  utmMedium?: string;
  utmCampaign?: string;
  utmTerm?: string;
  utmContent?: string;
} {
  if (typeof window === 'undefined') return {};
  
  const params = new URLSearchParams(window.location.search);
  
  return {
    utmSource: params.get('utm_source') || undefined,
    utmMedium: params.get('utm_medium') || undefined,
    utmCampaign: params.get('utm_campaign') || undefined,
    utmTerm: params.get('utm_term') || undefined,
    utmContent: params.get('utm_content') || undefined,
  };
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ localStorage
function getVisitedPages(): string[] {
  if (typeof window === 'undefined') return [];
  
  try {
    const visited = localStorage.getItem('visitedPages');
    return visited ? JSON.parse(visited) : [];
  } catch {
    return [];
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏—Å—Ç–æ—Ä–∏—é
export function trackPageVisit(page: string) {
  if (typeof window === 'undefined') return;
  
  try {
    const visited = getVisitedPages();
    if (!visited.includes(page)) {
      visited.push(page);
      localStorage.setItem('visitedPages', JSON.stringify(visited));
    }
  } catch (error) {
    console.error('Error tracking page visit:', error);
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
function getSessionStartTime(): number {
  if (typeof window === 'undefined') return Date.now();
  
  try {
    const startTime = sessionStorage.getItem('sessionStartTime');
    if (startTime) {
      return parseInt(startTime, 10);
    } else {
      const now = Date.now();
      sessionStorage.setItem('sessionStartTime', now.toString());
      return now;
    }
  } catch {
    return Date.now();
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
function getTimeOnSite(): number {
  const startTime = getSessionStartTime();
  return Math.floor((Date.now() - startTime) / 1000);
}

// –ü–æ–ª—É—á–∏—Ç—å landing page
function getLandingPage(): string {
  if (typeof window === 'undefined') return '';
  
  try {
    const landing = sessionStorage.getItem('landingPage');
    if (landing) {
      return landing;
    } else {
      const current = window.location.pathname;
      sessionStorage.setItem('landingPage', current);
      return current;
    }
  } catch {
    return window.location.pathname;
  }
}

// –°–æ–±—Ä–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export function collectTrackingData(): UserTrackingData {
  if (typeof window === 'undefined') {
    return {
      timestamp: new Date().toISOString(),
      timezone: 'Unknown',
      userAgent: 'Unknown',
      browser: 'Unknown',
      device: 'Unknown',
      os: 'Unknown',
      screenResolution: 'Unknown',
      referrer: '',
      landingPage: '',
      currentPage: '',
      pagesVisited: [],
      timeOnSite: 0,
    };
  }
  
  const { browser, os, device } = getBrowserInfo();
  const utmParams = getUTMParams();
  
  return {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    timestamp: new Date().toISOString(),
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    
    // –ë—Ä–∞—É–∑–µ—Ä –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    userAgent: navigator.userAgent,
    browser,
    device,
    os,
    screenResolution: `${window.screen.width}x${window.screen.height}`,
    
    // –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
    referrer: document.referrer || 'Direct',
    landingPage: getLandingPage(),
    currentPage: window.location.pathname,
    
    // UTM –º–µ—Ç–∫–∏
    ...utmParams,
    
    // –ü–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ
    pagesVisited: getVisitedPages(),
    timeOnSite: getTimeOnSite(),
  };
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å tracking data –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
export function formatTrackingForTelegram(tracking: UserTrackingData): string {
  let message = '\n\nüìä <b>Tracking Information:</b>\n';
  
  // –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
  message += `\nüïê <b>Time:</b> ${new Date(tracking.timestamp).toLocaleString('en-US')}`;
  message += `\nüåç <b>Timezone:</b> ${tracking.timezone}`;
  
  // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  message += `\n\nüíª <b>Device Info:</b>`;
  message += `\n‚Ä¢ Device: ${tracking.device}`;
  message += `\n‚Ä¢ OS: ${tracking.os}`;
  message += `\n‚Ä¢ Browser: ${tracking.browser}`;
  message += `\n‚Ä¢ Screen: ${tracking.screenResolution}`;
  
  // –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞
  message += `\n\nüéØ <b>Traffic Source:</b>`;
  message += `\n‚Ä¢ Referrer: ${tracking.referrer}`;
  message += `\n‚Ä¢ Landing: ${tracking.landingPage}`;
  message += `\n‚Ä¢ Current: ${tracking.currentPage}`;
  
  // UTM –º–µ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (tracking.utmSource || tracking.utmMedium || tracking.utmCampaign) {
    message += `\n\nüè∑Ô∏è <b>UTM Tags:</b>`;
    if (tracking.utmSource) message += `\n‚Ä¢ Source: ${tracking.utmSource}`;
    if (tracking.utmMedium) message += `\n‚Ä¢ Medium: ${tracking.utmMedium}`;
    if (tracking.utmCampaign) message += `\n‚Ä¢ Campaign: ${tracking.utmCampaign}`;
    if (tracking.utmTerm) message += `\n‚Ä¢ Term: ${tracking.utmTerm}`;
    if (tracking.utmContent) message += `\n‚Ä¢ Content: ${tracking.utmContent}`;
  }
  
  // –ü–æ–≤–µ–¥–µ–Ω–∏–µ
  message += `\n\nüìà <b>User Behavior:</b>`;
  message += `\n‚Ä¢ Time on site: ${Math.floor(tracking.timeOnSite / 60)}m ${tracking.timeOnSite % 60}s`;
  message += `\n‚Ä¢ Pages visited: ${tracking.pagesVisited.length}`;
  
  if (tracking.pagesVisited.length > 0) {
    message += `\n‚Ä¢ Journey:\n`;
    tracking.pagesVisited.slice(-5).forEach((page, index) => {
      message += `  ${index + 1}. ${page}\n`;
    });
  }
  
  return message;
}

