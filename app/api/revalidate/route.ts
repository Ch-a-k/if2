import { revalidatePath, revalidateTag } from 'next/cache'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const secret = request.nextUrl.searchParams.get('secret')
  
  if (secret !== process.env.REVALIDATION_TOKEN) {
    return NextResponse.json(
      { message: 'Invalid token' },
      { status: 401 }
    )
  }

  try {
    const body = await request.json()
    const { type } = body

    console.log('üîÑ Revalidation triggered for:', type)

    // –†–µ–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    switch (type) {
      case 'testimonial':
      case 'testimonialNew':
        revalidatePath('/')
        console.log('‚úÖ Revalidated: Home (testimonials)')
        break

      case 'clutchBadge':
        revalidatePath('/')
        console.log('‚úÖ Revalidated: Home (clutch badges)')
        break

      case 'teamMember':
      case 'specialist':
        revalidatePath('/about')
        console.log('‚úÖ Revalidated: About page')
        break

      case 'project':
        revalidatePath('/')
        revalidatePath('/works')
        revalidatePath('/works/[slug]', 'page')
        console.log('‚úÖ Revalidated: Projects')
        break

      case 'blogPost':
        revalidatePath('/blog')
        revalidatePath('/blog/[slug]', 'page')
        console.log('‚úÖ Revalidated: Blog')
        break

      case 'partner':
        revalidatePath('/')
        revalidatePath('/blog/[slug]', 'page')
        revalidatePath('/works/[slug]', 'page')
        console.log('‚úÖ Revalidated: Partners sections')
        break

      case 'siteSettings':
        revalidatePath('/', 'layout')
        console.log('‚úÖ Revalidated: Site settings')
        break

      default:
        // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å—ë
        revalidatePath('/')
        revalidatePath('/about')
        revalidatePath('/works')
        revalidatePath('/blog')
        console.log('‚úÖ Revalidated: All pages')
    }

    return NextResponse.json({
      revalidated: true,
      type,
      now: Date.now(),
    })
  } catch (err) {
    console.error('‚ùå Error revalidating:', err)
    return NextResponse.json(
      { message: 'Error revalidating', error: err },
      { status: 500 }
    )
  }
}

