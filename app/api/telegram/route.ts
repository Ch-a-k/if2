import { NextRequest, NextResponse } from 'next/server';
import { UserTrackingData, formatTrackingForTelegram } from '@/lib/tracking';
import { client, queries } from '@/lib/sanity';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, email, message, phone, company, tracking } = body;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Sanity –∏–ª–∏ –∏–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    let BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    let CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Sanity (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ env)
    try {
      const settings = await client.fetch(queries.siteSettings);
      if (settings?.telegramBotToken) {
        BOT_TOKEN = settings.telegramBotToken;
      }
      if (settings?.telegramChatId) {
        CHAT_ID = settings.telegramChatId;
      }
    } catch (error) {
      console.log('Failed to fetch Telegram settings from Sanity, using env variables');
    }

    if (!BOT_TOKEN || !CHAT_ID) {
      console.error('Telegram credentials not configured');
      return NextResponse.json(
        { error: 'Telegram not configured' },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let telegramMessage = `üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>\n`;
    telegramMessage += `\nüë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>`;
    telegramMessage += `\n‚Ä¢ –ò–º—è: ${name}`;
    telegramMessage += `\n‚Ä¢ Email: ${email}`;
    
    if (phone) {
      telegramMessage += `\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;
    }
    
    if (company) {
      telegramMessage += `\n‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ${company}`;
    }

    telegramMessage += `\n\nüí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${message}`;

    // –î–æ–±–∞–≤–ª—è–µ–º tracking –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (tracking) {
      telegramMessage += formatTrackingForTelegram(tracking as UserTrackingData);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const forwardedFor = request.headers.get('x-forwarded-for');
    const realIp = request.headers.get('x-real-ip');
    const ip = forwardedFor?.split(',')[0] || realIp || 'Unknown';
    
    const country = request.headers.get('x-vercel-ip-country') || 'Unknown';
    const city = request.headers.get('x-vercel-ip-city') || 'Unknown';

    if (country !== 'Unknown' || city !== 'Unknown') {
      telegramMessage += `\n\nüåç <b>Location (from IP):</b>`;
      telegramMessage += `\n‚Ä¢ IP: ${ip}`;
      telegramMessage += `\n‚Ä¢ Country: ${country}`;
      telegramMessage += `\n‚Ä¢ City: ${city}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: telegramMessage,
          parse_mode: 'HTML',
        }),
      }
    );

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.json();
      console.error('Telegram API error:', errorData);
      throw new Error('Failed to send to Telegram');
    }

    return NextResponse.json({ 
      success: true,
      message: 'Message sent successfully' 
    });

  } catch (error) {
    console.error('Error sending to Telegram:', error);
    return NextResponse.json(
      { error: 'Failed to send message' },
      { status: 500 }
    );
  }
}

